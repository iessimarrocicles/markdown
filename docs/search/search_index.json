{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentaci\u00f3n de aplicaciones con MarkDown","text":"<p>En este tema exploraremos c\u00f3mo utilizar Markdown para crear documentaci\u00f3n clara, estructurada y profesional para tus proyectos de desarrollo. </p> <p>Markdown es un lenguaje de marcado ligero y sencillo que permite generar documentos atractivos con una sintaxis m\u00ednima. Aprender\u00e1s desde conceptos b\u00e1sicos hasta funcionalidades avanzadas, as\u00ed como las mejores pr\u00e1cticas para integrarlo en tus proyectos y herramientas.</p> <p>La documentaci\u00f3n efectiva no solo mejora la comunicaci\u00f3n dentro de los equipos, sino que tambi\u00e9n facilita la comprensi\u00f3n y el mantenimiento del software a lo largo del tiempo. </p> <p>Acomp\u00e1\u00f1anos en este recorrido por Markdown y descubre c\u00f3mo convertirte en un experto en la creaci\u00f3n de documentaci\u00f3n t\u00e9cnica de calidad.</p>"},{"location":"markdown/editores/","title":"Edici\u00f3n de Archivos Markdown","text":"<p>Markdown es un formato de archivo de texto sencillo, por lo que cualquier editor b\u00e1sico de texto es suficiente para trabajar con \u00e9l. Sin embargo, existen herramientas especializadas para la edici\u00f3n de este tipo de archivos, tanto en entornos de escritorio como en aplicaciones web. </p> <p>A continuaci\u00f3n, te presentamos algunas de ellas, aunque hay muchas m\u00e1s:</p> <ul> <li> <p>Editores en L\u00ednea:</p> <ul> <li>Dillinger: https://dillinger.io/</li> <li>Stackedit: https://stackedit.io/</li> </ul> </li> <li> <p>Editores de Escritorio:</p> <ul> <li>Typora: https://typora.io/</li> <li>WriteMonkey: https://writemonkey.com/</li> <li>Haroopad: http://pad.haroopress.com/</li> </ul> </li> </ul> <p>La mayor\u00eda de estas herramientas cuentan con una interfaz dividida en dos partes: en una se escribe el contenido en formato Markdown y en la otra se muestra una vista previa en tiempo real. Typora, en particular, se diferencia por ofrecer una experiencia tipo WYSIWYG, ya que renderiza autom\u00e1ticamente el texto mientras lo escribes.</p>"},{"location":"markdown/editores/#1-visual-studio-code-vs-code","title":"1. Visual Studio Code (VS Code)","text":"<p>En este documento nos centraremos en Visual Studio Code (VSCode), un editor desarrollado por Microsoft. Aunque est\u00e1 dise\u00f1ado principalmente para trabajar con c\u00f3digo fuente de programas, soporta Markdown de forma nativa y permite previsualizar los documentos.</p> <p>Caracter\u00edsticas principales de VS Code:</p> <ul> <li>Ligero y multiplataforma: Funciona en Windows, macOS y Linux.</li> <li>Interfaz limpia: Ofrece una experiencia de usuario sencilla y personalizable.</li> <li>Paleta de comandos: Permite acceder r\u00e1pidamente a funcionalidades mediante atajos de teclado.</li> <li>Terminal integrada: Incluye una terminal que facilita el trabajo en proyectos complejos.</li> <li>Soporte de control de versiones: Compatible con sistemas como Git.</li> <li>Extensiones: Permite ampliar su funcionalidad mediante plugins.</li> </ul>"},{"location":"markdown/editores/#11-extension-markdown-all-in-one","title":"1.1. Extensi\u00f3n Markdown All In One","text":"<p>Una de las extensiones m\u00e1s \u00fatiles para trabajar con Markdown en VS Code es Markdown All In One. </p> <p>Esta extensi\u00f3n a\u00f1ade funciones como:</p> <ul> <li>Atajos de teclado para trabajar m\u00e1s r\u00e1pido.</li> <li>Generaci\u00f3n autom\u00e1tica de tablas de contenidos.</li> <li>Varias utilidades que mejoran la experiencia con Markdown.</li> </ul>"},{"location":"markdown/editores/#12-instalacion-de-visual-studio-code","title":"1.2. Instalaci\u00f3n de Visual Studio Code","text":"<p>La instalaci\u00f3n m\u00e1s sencilla de VS Code es descargarlo desde su sitio oficial: https://code.visualstudio.com/download.</p> <p>Para m\u00e1s informaci\u00f3n sobre el proceso de instalaci\u00f3n en sistemas Linux y Windows, puedes consultar la documentaci\u00f3n oficial del editor:</p> <ul> <li>Instalaci\u00f3n en Linux</li> <li>Instalaci\u00f3n en Windows</li> </ul>"},{"location":"markdown/editores/#2-primeros-pasos-con-vs-code","title":"2. Primeros Pasos con VS Code","text":"<p>Una vez instalado, puedes acceder a Visual Studio Code desde el men\u00fa principal de tu sistema, en la categor\u00eda de Programaci\u00f3n. </p> <p>Al abrirlo por primera vez, se te pedir\u00e1 que elijas entre un tema claro o uno oscuro para personalizar la apariencia del editor. Puedes seleccionar cualquiera de ellos seg\u00fan tus preferencias.</p> <p>La interfaz principal de VS Code se ve aproximadamente as\u00ed:</p> <p></p>"},{"location":"markdown/editores/#21-elementos-principales-de-la-interfaz","title":"2.1. Elementos principales de la interfaz:","text":"<ul> <li> <p>Barra de actividades: Ubicada a la izquierda, contiene cinco actividades principales:</p> <ul> <li>Explorador de archivos: Para gestionar tus proyectos y archivos.</li> <li>B\u00fasqueda de texto: Herramienta para buscar contenido dentro del proyecto.</li> <li>Control de versiones: Soporte integrado para Git.</li> <li>Depuraci\u00f3n: Permite ejecutar y depurar c\u00f3digo.</li> <li>Extensiones: Gestiona y a\u00f1ade funcionalidades adicionales al editor.</li> </ul> </li> <li> <p>La ventana de bienvenida: La ventana de bienvenida ocupa la parte superior del editor y ofrece opciones iniciales como crear un archivo nuevo, abrir una carpeta o a\u00f1adir un espacio de trabajo.</p> </li> <li>Paneles adicionales: debajo de la ventana principal encontrar\u00e1s diversos paneles que muestran informaci\u00f3n sobre la depuraci\u00f3n, errores y advertencias o la terminal integrada de VS Code.</li> <li>Barra de estado: en la parte inferior del editor est\u00e1 la barra de estado, que muestra informaci\u00f3n sobre el proyecto y los archivos abiertos.</li> </ul> <p>En versiones recientes, al abrir una carpeta nueva, el editor puede pedir que confirmes si conf\u00edas en la fuente del c\u00f3digo dentro de esa carpeta.</p> <p></p> <p>Para m\u00e1s detalles sobre la interfaz de VS Code, puedes consultar:</p> <ul> <li>Documentaci\u00f3n de la Interfaz de Usuario</li> </ul>"},{"location":"markdown/editores/#3-trabajando-con-vs-code-y-markdown","title":"3. Trabajando con VS Code y Markdown","text":"<p>Con VS Code puedes editar archivos directamente, pero lo m\u00e1s \u00fatil es abrir una carpeta completa para trabajar con todos los archivos que contiene.</p> <p></p> <ol> <li>Haz clic en el bot\u00f3n Open Folder del explorador de archivos.</li> <li>Selecciona una carpeta. Por ejemplo, una llamada <code>DocumentosMarkdown</code>.</li> </ol> <p>La estructura de la carpeta se mostrar\u00e1 como un \u00e1rbol en el explorador de archivos, con todas las carpetas y archivos dentro. Por ejemplo, podr\u00edas ver una carpeta principal con subcarpetas como <code>Unidad 1</code> y <code>Unidad 2</code>.</p> <p></p> <p>Al lado del nombre de la carpeta principal, encontrar\u00e1s cuatro iconos:</p> <ol> <li>Crear documento nuevo: Agrega un archivo en la carpeta seleccionada.</li> <li>Crear carpeta nueva: Agrega una subcarpeta.</li> <li>Refrescar vista: Actualiza el contenido del explorador.</li> <li>Contraer \u00e1rbol: Muestra solo los elementos del nivel principal.</li> </ol>"},{"location":"markdown/editores/#31-crear-un-documento-nuevo","title":"3.1. Crear un documento nuevo","text":"<ol> <li>Haz clic en el primer icono para crear un documento.</li> <li>Introduce un nombre para el archivo. Recuerda usar la extensi\u00f3n <code>.md</code> para que sea reconocido como un archivo Markdown.</li> </ol> <p>Nota importante: Aunque los archivos Markdown son de texto, usar la extensi\u00f3n <code>.md</code> asegura que las aplicaciones los reconozcan correctamente. En VS Code, estos archivos aparecer\u00e1n con un icono espec\u00edfico.</p>"},{"location":"markdown/editores/#32-editar-y-previsualizar-un-archivo-markdown","title":"3.2. Editar y previsualizar un archivo Markdown","text":"<p>Una vez creado un archivo, puedes empezar a escribir directamente. En la parte superior derecha de la ventana del editor, ver\u00e1s varios iconos. Uno de ellos es un rect\u00e1ngulo dividido con una lupa. Este icono permite activar la vista dividida para:</p> <ul> <li>Mostrar el texto que escribes en la parte izquierda.</li> <li>Ver una previsualizaci\u00f3n en tiempo real en la parte derecha.</li> </ul> <p></p> <p>Para cerrar la vista previa, haz clic en la x junto al nombre del archivo en la previsualizaci\u00f3n.</p>"},{"location":"markdown/editores/#4-instalacion-de-plugins-en-vs-code","title":"4. Instalaci\u00f3n de plugins en VS Code","text":"<p>VS Code es ligero pero extremadamente flexible gracias a las extensiones. </p>"},{"location":"markdown/editores/#41-como-instalar-extensiones","title":"4.1. C\u00f3mo instalar extensiones","text":"<ol> <li>Haz clic en la actividad de Extensiones en la barra de actividades.</li> <li>Usa el cuadro de b\u00fasqueda para buscar, por ejemplo, <code>Markdown</code>.</li> </ol> <p>Aparecer\u00e1n diversas extensiones relacionadas. Aunque no es obligatorio instalar extensiones para trabajar con Markdown, algunas como Markdown All In One ofrecen funciones adicionales interesantes. </p> <p>Para instalar una extensi\u00f3n:</p> <ul> <li>Haz clic en el bot\u00f3n Install que aparece junto a la descripci\u00f3n de la extensi\u00f3n.</li> </ul> <p></p> <p>\u00a1Explora estas herramientas y saca el m\u00e1ximo partido a VS Code trabajando con Markdown!</p>"},{"location":"markdown/introduccion/","title":"Markdown","text":"<p>Markdown naci\u00f3 como una herramienta de conversi\u00f3n de texto plano a HTML. Fue creada en 2004 por John Gruber y se distribuye de manera gratuita bajo una licencia BSD.</p> <p>Aunque en realidad, Markdown tambi\u00e9n se considera un lenguaje cuyo objetivo es permitir la creaci\u00f3n de contenido de forma sencilla, manteniendo un dise\u00f1o legible. Por lo tanto, se puede simplificar definiendo Markdown como un m\u00e9todo de escritura.</p> <p>De cara al usuario final, no hay ninguna diferencia perceptible. Por ejemplo, este art\u00edculo acerca de c\u00f3mo funciona Markdown est\u00e1 escrito en este formato, y, sin embargo, lo ves perfectamente formateado.</p> <p>Este m\u00e9todo permite a\u00f1adir formatos como negritas, cursivas o enlaces, utilizando simplemente texto plano, lo que hace que la escritura sea m\u00e1s simple y eficiente al evitar distracciones.</p>"},{"location":"markdown/introduccion/#1-diferencia-entre-markdown-y-html","title":"1. Diferencia entre Markdown y HTML","text":"<p>Observa la diferencia entre la sintaxis Markdown (izquierda) y la sintaxis HTML (derecha). \u00bfCon cu\u00e1l te quedas? </p> MarkDown vs HTML <p>Para lograrlo, necesitar\u00e1s conocer la sintaxis Markdown.</p>"},{"location":"markdown/introduccion/#2-para-que-sirve-markdown","title":"2. \u00bfPara qu\u00e9 sirve Markdown?","text":"<p>Markdown es ideal para quienes publican contenido de manera constante en Internet, donde el lenguaje HTML est\u00e1 ampliamente presente en plataformas como WordPress, Squarespace o Jekyll. </p> <p>Sin embargo, no se limita a blogs o p\u00e1ginas web. Servicios como Trello o foros como Stack Overflow tambi\u00e9n soportan este lenguaje. Adem\u00e1s, con el tiempo encontrar\u00e1s a\u00fan m\u00e1s lugares que lo utilizan.</p> <p>Incluso en el mundo \u201coffline\u201d, Markdown est\u00e1 cada vez m\u00e1s extendido. Puedes usarlo para tomar notas y apuntes en clases o reuniones, utilizando aplicaciones espec\u00edficas. Tambi\u00e9n podr\u00edas escribir un libro, ya que puedes exportar el contenido final f\u00e1cilmente a formatos como ePub.</p> <p>Muchas publicaciones en Amazon, Google Play o iBooks han sido creadas gracias a Markdown y herramientas como Ulysses (para Mac y iOS). Gracias a la simplicidad de su sintaxis, es ideal para escribir y dar formato r\u00e1pidamente, especialmente desde dispositivos m\u00f3viles.</p>"},{"location":"markdown/introduccion/#3-por-que-utilizar-markdown","title":"3. \u00bfPor qu\u00e9 utilizar Markdown?","text":"<p>Markdown es un lenguaje de marcado basado en un formato de texto plano. Este tipo de formato es compatible con todas las plataformas, lo que garantiza que tu contenido ser\u00e1 accesible desde cualquier dispositivo: smartphones, ordenadores de escritorio, tablets, etc. En cualquiera de ellos encontrar\u00e1s aplicaciones adecuadas para leer y editar este tipo de contenido.</p> <p>Por ejemplo, observa la diferencia entre un archivo creado con un procesador de textos (como Word) y el mismo archivo abierto con un editor de texto plano:</p> <ul> <li>Texto en un procesador como Word: Todo parece muy sencillo y visual.</li> <li>Texto en un editor de texto plano: Totalmente limpio y legible, aunque menos atractivo visualmente.</li> </ul> <p>Si en el futuro herramientas como Microsoft Word desapareciesen, podr\u00edas perder acceso a todo el contenido creado durante a\u00f1os. Para evitar esto, lo m\u00e1s inteligente es generar tu contenido de manera sencilla: utilizando texto plano.</p> <p>El \u00fanico inconveniente del texto plano es que no permite aplicar formato (negritas, cursivas, enlaces, etc.), a menos que utilices Markdown.</p>"},{"location":"markdown/referencias/","title":"Referencias e informaci\u00f3n adicional Markdown","text":"<p>Para mayor informaci\u00f3n sobre Markdown pod\u00e9is consultar:</p> <ul> <li>La gu\u00eda de Markdown en espa\u00f1ol: https://markdown.es/ </li> <li>La sintaxis extendida de Markdown en la web: https://www.markdownguide.org/extended-syntax</li> <li>La secci\u00f3n dedicada a Markdown al manual de Pandoc</li> <li>El art\u00edculo de John Gruber sobre su versi\u00f3n de Markdown.</li> </ul>"},{"location":"markdown/sintaxis/","title":"Sintaxis b\u00e1sica","text":"<p>Como hemos dicho, Markdown se basa en ficheros de tipos texto, que no contienen ninguna informaci\u00f3n interna sobre el formato. Esta informaci\u00f3n, se especificar\u00e1 de forma expl\u00edcita mediante hashtags, que ser\u00e1n visibles en todo momento, y que facilitar\u00e1n, por un lado, su interpretaci\u00f3n en la hora de exportarlos a otro formato, pero tambi\u00e9n su lectura por parte de las personas.</p> <p>En este apartado, vamos a ver cu\u00e1les son los diferentes elementos que podemos utilizar en un texto en formato Markdown, as\u00ed como las principales marcas de formato.</p>"},{"location":"markdown/sintaxis/#1-parrafos","title":"1. P\u00e1rrafos","text":"<p>Un p\u00e1rrafo, tal y como lo entiende Markdown, es un bloque de texto definido entre dos saltos de l\u00ednea (tecla <code>Intro/Entero/Entrar</code>). </p> <p>Si utilizamos solo un salto de l\u00ednea, se sobreentiende que es el mismo p\u00e1rrafo, y en la hora de generar el documento, lo veremos como tal.</p> Markdown<pre><code>Este es el primer p\u00e1rrafo, como veis, necesita dos saltos de l\u00ednea, o el que ser\u00eda el mismo, una l\u00ednea en blanco despu\u00e9s del p\u00e1rrafo.\n\nEste es otro p\u00e1rrafo.\n</code></pre> <p>Resultado</p> <p>Este es el primer p\u00e1rrafo, como veis, necesita dos saltos de l\u00ednea, o el que ser\u00eda el mismo, una l\u00ednea en blanco despu\u00e9s del p\u00e1rrafo.</p> <p>Este es otro p\u00e1rrafo.</p>"},{"location":"markdown/sintaxis/#2-cabeceras","title":"2. Cabeceras","text":"<p>Hay varias formas de marcar cabeceras, nosotros utilizaremos el Estilo ATX, al cual, utilizamos el s\u00edmbolo (<code>#</code>) antes del texto para indicar el nivel de la cabecera. Se admiten hasta seis niveles de profundidad (<code>######</code>), el que vendr\u00eda a ser del (<code>h1</code>) hasta el (<code>h6</code>) de #HTML.</p> Markdown<pre><code># Encabezado 1\n\n## Encabezado 2\n\n### Encabezado 3\n\n...\n</code></pre> <p>A tener con cuenta</p> <p>La versi\u00f3n est\u00e1ndar de Markdown no requiere de una l\u00ednea en blanco antes de una cabecera, pero otras versiones, como por ejemplo la de Pandoc s\u00ed que la requiere. Sin embargo, aunque el est\u00e1ndar no lo utilizo, conviene a\u00f1adirla puesto que facilita as\u00ed la lectura y localizaci\u00f3n de estas.</p> <p>Algunas implementaciones, tampoco requieren de un espacio entre el s\u00edmbolo <code>#</code> inicial y el primer car\u00e1cter del t\u00edtulo. </p>"},{"location":"markdown/sintaxis/#21-atributos-a-la-cabecera","title":"2.1. Atributos a la cabecera","text":"<p>Cuando se genera un documento, ya sea PDF, #HTML u otro formato a partir de un documento en Markdown, a las cabeceras se los asigna un identificador de manera autom\u00e1tica, para que se pueda hacer referencia a ellas desde otras partes del documento. Este identificador se obtiene a partir del texto de la cabecera, por el que si esta es larga, el identificador tambi\u00e9n lo ser\u00e1. La versi\u00f3n de Pandoc, nos permite a\u00f1adir ciertos atributos a las cabeceras, entre las que se encuentra el identificador. </p> <p>Dada, por ejemplo, una cabecera como la siguiente:</p> <p>Markdown<pre><code># Introducci\u00f3n: El arte de escribir ante un ordenador\n</code></pre> El identificador que se genera es: <code>id=\"introducci\u00f3n-lart-describir-ante-un-ordenador\"</code>. </p> <p>Esta cabecera, la podr\u00edamos haber escrito tambi\u00e9n de la siguiente forma:</p> Markdown<pre><code># Introducci\u00f3n: El arte de escribir ante un ordenador { #introduccio }\n</code></pre> <p>Siente el identificador de la cabecera solo <code>#introduccio</code>, de forma que podemos hacer referencia al apartado mediante este.</p>"},{"location":"markdown/sintaxis/#3-formato-de-texto","title":"3. Formato de texto","text":"<p>Markdown nos permite hacer uso del s\u00edmbolo del asterisco como marca de formato de la siguiente forma:</p> <ul> <li>Negrita: rodea el texto con <code>**</code>.</li> <li>Cursiva: rodea el texto con <code>*</code>.</li> <li>Negrita y cursiva: Usa tres asteriscos.</li> </ul> <p>Hay que tener en cuenta que no tenemos que a\u00f1adir ning\u00fan espacio entre los asteriscos del principio y la primera palabra y los asteriscos del final y la \u00faltima.</p> Markdown<pre><code>**Texto en negrita**\n*Texto en cursiva*\n***Texto en negrita y cursiva***\n\nSi a\u00f1adimos alg\u00fan espacio entre medio, ** no se interpretar\u00e1 correctamente **\n</code></pre> <p>Resultado</p> <p>Texto en negrita</p> <p>Texto en cursiva</p> <p>Texto en negrita y cursiva</p> <p>Si a\u00f1adimos alg\u00fan espacio entre medio, ** no se interpretar\u00e1 correctamente **</p>"},{"location":"markdown/sintaxis/#4-lineas-horizontales","title":"4. L\u00edneas horizontales","text":"<p>Una l\u00ednea horizontal se define mediante tres o m\u00e1s s\u00edmbolos <code>-</code> o <code>_</code>, separados o no por espacios:</p> Markdown<pre><code>- - -\n\no \n\n_ _ _\n</code></pre> <p>Resultado</p> <p>o </p>"},{"location":"markdown/sintaxis/#5-listas","title":"5. Listas","text":"<p>Markdown permite hacer uso tanto de listas ordenadas como listas no ordenadas.</p>"},{"location":"markdown/sintaxis/#51-listas-no-ordenadas","title":"5.1. Listas no ordenadas","text":"<p>Las listas no ordenadas se marcan haciendo uso de los s\u00edmbolos <code>*</code>, <code>+</code> o <code>-</code> a primeros de cada elemento, e incluyendo cada \u00edtem en una l\u00ednea diferente (y no hacen falta dos saltos de l\u00ednea).</p> Markdown<pre><code>* Elemento 1\n* Elemento 2\n...\n</code></pre> <p>Cada elemento de la lista puede contener varios p\u00e1rrafos, y otros contenidos a nivel de bloque. Cuando queremos incluir varios p\u00e1rrafos en un \u00edtem de la lista, el segundo p\u00e1rrafo y posterior tendr\u00e1n que ir precedidos por una l\u00ednea en blanco, y sangrados para alinearse con el contenido que no sea el espacio despu\u00e9s del marcador de la lista.</p> <p>Por ejemplo:</p> Markdown<pre><code>* Primer elemento de la lista\n* Segundo elemento de la lista\n\n  Otro p\u00e1rrafo correspondiente al segundo elemento de la lista.\n  No hace falta un espacio en blanco entre el \u00faltimo p\u00e1rrafo y el siguiente elemento,\n  pero lo podemos a\u00f1adir para facilitar la lectura de la lista.\n\n* Tercer elemento de la lista.\n</code></pre> <p>Para generar listas anidadas dentro de otras, simplemente tendr\u00e1s que a\u00f1adir cuatro espacios en blanco antes del siguiente <code>*</code>,<code>-</code> o <code>+</code>.</p> Markdown<pre><code>* Elemento 1\n    * subelemento 1.1\n        * subelemento 1.1.1\n        * subelemento 1.1.2\n    * subelemento 1.2\n    * subelemento 1.3\n* Elemento 2\n</code></pre> <p>En estos casos, como que podemos utilizar varios s\u00edmbolos para indicar listas, se suele utilizar un elemento por cada nivel de la lista, con el fin de facilitar la lectura del texto plano:</p> Markdown<pre><code>* Elemento 1\n    + subelemento 1.1\n        - subelemento 1.1.1\n        - subelemento 1.1.2\n    + subelemento 1.2\n    + subelemento 1.3\n* Elemento 2\n</code></pre> <p>Resultado</p> <ul> <li>Elemento 1<ul> <li>subelemento 1.1<ul> <li>subelemento 1.1.1</li> <li>subelemento 1.1.2</li> </ul> </li> <li>subelemento 1.2</li> <li>subelemento 1.3</li> </ul> </li> <li>Elemento 2</li> </ul>"},{"location":"markdown/sintaxis/#52-listas-ordenadas","title":"5.2. Listas ordenadas","text":"<p>El funcionamiento de las listas ordenadas es el mismo que las no ordenadas, salvo que cada elemento de la lista lleva un n\u00famero.</p> <p>En la versi\u00f3n est\u00e1ndar de Markdown, los elementos que indican la orden tienen que ser n\u00fameros seguidos de un punto y un espacio. En el est\u00e1ndar, estos n\u00fameros se ignoran, por lo que la lista:</p> Markdown<pre><code>1. Elemento 1\n2. Elemento 2\n3. Elemento 3\n</code></pre> <p>Ser\u00e1 la misma que:</p> Markdown<pre><code>4. Elemento 1\n5. Elemento 2\n6. Elemento 3\n</code></pre> <p>Resultado</p> <ol> <li>Elemento 1</li> <li>Elemento 2</li> <li>Elemento 3</li> </ol>"},{"location":"markdown/sintaxis/#6-tablas","title":"6. Tablas","text":"<p>Las tablas nos sirven para presentar informaci\u00f3n de manera organizada.</p> <p>La versi\u00f3n original de Markdown de John Gruber no incluye la definici\u00f3n de tablas en la sintaxis de Markdown. Como que inicialmente se cre\u00f3 como una herramienta para hacer la conversi\u00f3n a HTML, para a\u00f1adir tablas se utilizaba directamente este lenguaje.</p> <p>Sin embargo, las diferentes variantes de Markdown han ido a\u00f1adiendo notaciones y extensiones al Markdown original para soportar tablas.</p> <p>La sintaxis para crear tablas del Markdown de Github es una de las m\u00e1s extendidas, y hace uso de barras verticales (<code>|</code>) y guiones (<code>-</code>) para crearlas. Los guiones se utilizan para crear el encabezamiento de cada columna, y las barras verticales sirven de separador de cada columna. Adem\u00e1s, para que la tabla se represente correctamente, hace falta una l\u00ednea en blanco antes de la tabla.</p> <p>Las tablas, en este formato, tienen que tener necesariamente una cabecera y un cuerpo, y seguir\u00e1n la siguiente sintaxis:</p> Markdown<pre><code>| Cabecera 1 | Cabecera 2 |\n|-------------|-------------|\n| Valor 1     | Valor 2     |\n| Valor 3     | Valor 4     |\n</code></pre> <p>Resultado</p> Cabecera 1 Cabecera 2 Valor 1 Valor 2 Valor 3 Valor 4 <p>Algunas consideraciones:</p> <ul> <li>Podemos a\u00f1adir tantos campos (columnas) como queramos. </li> <li>La l\u00ednea que separa la cabecera del cuerpo <code>|---|---|</code> es obligatoria, pero no es necesario que tenga tantos caracteres como tengan las cabeceras, por el que no hace falta que la tabla est\u00e9 completamente alineada. </li> <li>Las barras verticales (<code>|</code>) del principio y del final son opcionales.</li> </ul>"},{"location":"markdown/sintaxis/#61-formateado-el-contenido-de-una-tabla","title":"6.1. Formateado el contenido de una tabla","text":"<p>Dentro de una tabla podemos utilizar tambi\u00e9n ciertas marcas de formato, como negritas, cursivas, enlaces, im\u00e1genes...</p> <p>Adem\u00e1s, podemos alinear el texto a la izquierda, a la derecha o en el centro de la columna, a\u00f1adiendo la marca dos puntos <code>:</code>, al lado izquierdo, derecho, o a los dos, de los guiones del encabezamiento.</p> <p>Vemos-lo con un ejemplo. La siguiente definici\u00f3n de tabla:</p> Markdown<pre><code>| Texto a la izquierda | Texto centrado | Texto a la derecha |\n|        :---       |     :---:    |      ---:       |\n| xxx               | xxx          | xxx             |\n| xxxxx             | xxxxx        | xxxxx           |\n</code></pre> <p>Resultado</p> Texto a la izquierda Texto centrado Texto a la derecha xxx xxx xxx xxxxx xxxxx xxxxx <p>Si queremos a\u00f1adir dentro de una tabla una barra vertical (|) como contenido, tenemos que poner antes el s\u00edmbolo (<code>\\</code>), para indicar que el car\u00e1cter siguiente no se tiene que interpretar como marca de formato Markdown. Esta barra invertida se denomina car\u00e1cter de escape, y a la combinaci\u00f3n de ella con cualquier marca que queramos que no se interprete se conoce como secuencia de escape. </p>"},{"location":"markdown/sintaxis/#7-fragmentos-de-codigo","title":"7. Fragmentos de c\u00f3digo","text":"<p>Markdown tiene un amplio uso en la documentaci\u00f3n t\u00e9cnica de proyectos inform\u00e1ticos, donde es habitual incluir fragmentos del c\u00f3digo fuente de los programas. Para resaltar estos tipos de fragmentos, Markdown utiliza una sintaxis especial, haciendo uso de los caracteres del acento abierto: `.</p> <p>Cuando se trata de fragmentos de c\u00f3digo que tienen que ir en la misma l\u00ednea que el texto, por ejemplo si queremos indicar un hashtag #HTML, lo hacemos, `de este modo`, haciendo uso de un \u00fanico car\u00e1cter de acento, mientras que si el que volamos es escribir un bloque de c\u00f3digo, utilizar\u00edamos tres s\u00edmbolos de acento abierto ```. Adem\u00e1s, detr\u00e1s los primeros s\u00edmbolos, podemos especificar de qu\u00e9 lenguaje se trata. Por ejemplo, para indicar el c\u00f3digo #HTML de una p\u00e1gina web, har\u00edamos:</p> Markdown<pre><code>    ```html title=\"HTML\" linenums=\"1\" \n        &lt;html&gt;\n            &lt;body&gt;\n            &lt;h1&gt;T\u00edtulo de la p\u00e1gina web&lt;/h1&gt;\n            &lt;p&gt;P\u00e1rrafo&lt;/p&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\n    ```\n</code></pre> <p>Hay que remarcar que el nombre del lenguaje detr\u00e1s las comillas hace que al mostrar el resultado, se tenga en cuenta el lenguaje de programaci\u00f3n para resaltar la sintaxis propia del lenguaje.</p>"},{"location":"markdown/sintaxis/#8-citas","title":"8. Citas","text":"<p>En Markdown, un bloque de texto en forma de cita consiste en uno o m\u00e1s p\u00e1rrafos u otros elementos de bloque (como, por ejemplo, listas o cabeceras), donde cada l\u00ednea se encuentra precediera del car\u00e1cter <code>&gt;</code> y opcionalmente un espacio.</p> <p>Vemos algunos ejemplos:</p> <p>Ejemplo:</p> Markdown<pre><code>&gt;\n&gt; Un documento con formato Markdown tendr\u00eda que ser publicable tal cual, como texto plano, sin que parezco que se ha marcado con hashtags o instrucciones de formato.\n&gt;\n&gt; John Gruber\n</code></pre> <p>Resultado</p> <p>Un documento con formato Markdown tendr\u00eda que ser publicable tal cual, como texto plano, sin que parezco que se ha marcado con hashtags o instrucciones de formato.</p> <p>John Gruber</p>"},{"location":"markdown/sintaxis/#9-enlaces","title":"9. Enlaces","text":"<p>Markdown nos permite generar enlaces tanto a direcciones de Internet, como hacer referencia a ficheros locales, mediante su ruta relativa o incluso dentro del propio documento.</p> <p>El formato general para a\u00f1adir un enlace es el siguiente:</p> Markdown<pre><code>[Texto del enlace](#URL_o_direcci\u00f3n_relativa)\n</code></pre> <p>Por ejemplo, para a\u00f1adir un enlace a un sitio web, escribiremos:</p> Markdown<pre><code>Ir a la web del [IES Dr. Llu\u00eds Simarro](https://portal.edu.gva.es/ieslluissimarro/)\n</code></pre> <p>Resultado</p> <p>Ir a la web del IES Dr. Llu\u00eds Simarro</p>"},{"location":"markdown/sintaxis/#91-enlaces-internos","title":"9.1. Enlaces internos","text":"<p>Para a\u00f1adir un enlace a una secci\u00f3n de nuestro documento, haremos uso del identificador que se asigna autom\u00e1ticamente, o bien que le hemos asignado nosotros. </p> <p>Por ejemplo, si para el apartado introductorio a\u00f1adimos un identificador de la siguiente forma:</p> Markdown<pre><code># Introducci\u00f3n: El arte de escribir ante un ordenador {#introduccion}\n</code></pre> <p>Podemos hacer referencia a \u00e9l de la manera siguiente:</p> Markdown<pre><code>Haz clic [en el siguiente enlace](#introduccion) para volver a la secci\u00f3n de Introducci\u00f3n.\n</code></pre> <p>Resultado</p> <p>Haz clic en el siguiente enlace para volver a la secci\u00f3n de Introducci\u00f3n.</p>"},{"location":"markdown/sintaxis/#10-imagenes","title":"10. Im\u00e1genes","text":"<p>La sintaxis para a\u00f1adir una imagen es parecida a la del enlace, precedida de una exclamaci\u00f3n <code>!</code>:</p> Markdown<pre><code>![Texto alternativo o pie de la imagen](Ubicaci\u00f3n de la imagen)\n</code></pre> <p>Al igual que los enlaces, la ubicaci\u00f3n puede ser una direcci\u00f3n de Internet o bien la ruta a un fichero local a nuestro ordenador:</p> Markdown<pre><code>![Logotipo de Markdown a la Wikipedia](https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/markdown-mark.svg/1920px-markdown-mark.svg.png)\n\n![Logotipo de Markdown a en una ruta relativa](./../img/logoMarkdown.png)\n</code></pre> <p>En este segundo caso, busca la imagen logoMarkdown.png en una carpeta im\u00e1genes ubicada en la carpeta indicada.</p> <p>Hay que tener en cuenta que cuando se exporte el fichero a HTML, estas referencias seguir\u00e1n existiendo al c\u00f3digo HTML.</p>"},{"location":"markdown/sintaxis/#101-anadiendo-tamano-a-las-imagenes","title":"10.1. A\u00f1adiendo tama\u00f1o a las im\u00e1genes","text":"<p>Algunas versiones de Markdown (como Pandoc) permiten a\u00f1adir ciertos atributos a las im\u00e1genes.  Entre estos destacan especialmente (<code>width</code>) y (<code>height</code>), que permiten especificar el tama\u00f1o de la imagen. </p> <p>Si no se indica nada, el tama\u00f1o se entiende que se especifica en p\u00edxeles, pero podemos utilizar otras unidades como px, #cm, mm, in, inch y %, sin incluir espacios entre el n\u00famero y las unidades. </p> <p>Ejemplos:</p> Markdown<pre><code>![Imagen 1 - 10cm](./../img/logoMarkdown.png){ width=10cm }\n\n![Imagen 2 - 50mm](./../img/logoMarkdown.png){ width=50mm }\n\n![Imagen 3 - 50%](./../img/logoMarkdown.png){ width=50% }\n</code></pre> <p>Resultado</p> <p></p> <p></p> <p></p>"},{"location":"mkdocs/configuracion/","title":"Configuraci\u00f3n","text":""},{"location":"mkdocs/configuracion/#1-modificamos-el-archivo-mkdocsyml","title":"1. Modificamos el archivo mkdocs.yml","text":"<p>Tanto MkDocs como el tema que elijas ofrecen muchas opciones de configuraci\u00f3n, pero aqu\u00ed veremos la configuraci\u00f3n b\u00e1sica. Si quieres personalizar algo m\u00e1s, tendr\u00e1s que consultar la documentaci\u00f3n de MkDocs o la del tema que est\u00e9s usando.</p> <p>Puedes encontrar la documentaci\u00f3n sobre la configuraci\u00f3n de MkDocs en el siguiente enlace: https://www.mkdocs.org/user-guide/configuration/.</p>"},{"location":"mkdocs/configuracion/#11-site_name","title":"1.1. site_name","text":"<p>La \u00fanica configuraci\u00f3n estrictamente necesaria para servir la web es site_name, que ser\u00e1 una cadena de texto que define el t\u00edtulo de la pesta\u00f1a del navegador y aparecer\u00e1 en el men\u00fa de navegaci\u00f3n. Es decir, es el nombre que identifica tu sitio web, as\u00ed que ser\u00e1 la primera configuraci\u00f3n que modifiquemos.</p> <p>Por ejemplo, en el caso de esta web, hemos utilizado site_name: Web est\u00e1tica con MkDocs.</p>"},{"location":"mkdocs/configuracion/#12-docs_dir","title":"1.2. docs_dir","text":"<p>Con la directiva docs_dir, indicamos en qu\u00e9 carpeta se encuentran los archivos fuente (el contenido escrito en Markdown) a partir de los cuales se generar\u00e1 la web.</p> <p>docs_dir</p> <p>De momento podemos dejar docs_dir sin configurar, aunque necesitaremos modificarlo en apartados posteriores.</p>"},{"location":"mkdocs/configuracion/#13-site_dir","title":"1.3. site_dir","text":"<p>Con la directiva site_dir, indicamos en qu\u00e9 carpeta queremos que se genere la versi\u00f3n compilada de la web lista para publicar.</p> <p>site_dir</p> <p>De momento podemos dejar site_dir sin configurar, pero ser\u00e1 necesario en apartados posteriores.</p>"},{"location":"mkdocs/configuracion/#2-paginas","title":"2. P\u00e1ginas","text":"<p>En esta secci\u00f3n veremos c\u00f3mo configurar nuevas p\u00e1ginas para tu sitio web. Estas ser\u00e1n accesibles a trav\u00e9s del men\u00fa de navegaci\u00f3n.</p> <p>El primer paso consiste en crear un nuevo archivo con extensi\u00f3n .md (por ejemplo, about.md) y guardarlo en la carpeta docs.</p> <p>Despu\u00e9s, modificaremos el archivo de configuraci\u00f3n para a\u00f1adir al men\u00fa de navegaci\u00f3n nuestras p\u00e1ginas de la siguiente manera:</p> <p>YAML<pre><code>nav:\n    - Home: index.md\n    - About: about.md\n</code></pre> Ahora la p\u00e1gina tendr\u00e1 el siguiente aspecto:</p> <p>Como puedes ver, en el men\u00fa de navegaci\u00f3n aparecen las opciones Home y About, y tambi\u00e9n se muestran flechas de Previous y Next para desplazarnos entre p\u00e1ginas.</p> <p>Para crear submen\u00fas en el men\u00fa de navegaci\u00f3n, podemos configurar el archivo mkdocs.yml as\u00ed:</p> YAML<pre><code>nav:\n    - Home: index.md\n    - Tema 1:\n      - Apartat 1: tema1/apartat1.md\n      - Apartat 2: tema1/apartat2.md\n    - About: about.md\n</code></pre>"},{"location":"mkdocs/configuracion/#3-buscador","title":"3. Buscador","text":"<p>Observa que tambi\u00e9n disponemos de un buscador en el men\u00fa de navegaci\u00f3n, que nos permitir\u00e1 realizar b\u00fasquedas en todo el contenido del sitio web.</p> <p>Buscador</p> <p>Esto puede ser muy \u00fatil para tu lectores, ya que as\u00ed podr\u00e1n utilizar tus materiales como documentaci\u00f3n de referencia y encontrar de forma r\u00e1pida el contenido que les interese.</p> <p>El motor de b\u00fasqueda localizar\u00e1 todas las apariciones de la palabra que se introduzca en el buscador.</p>"},{"location":"mkdocs/configuracion/#4-tema","title":"4. Tema","text":"<p>Hasta ahora, hemos utilizado el tema por defecto para renderizar la p\u00e1gina, pero existen otros temas para cambiar su apariencia sin tocar el contenido en Markdown.</p> <p>Para cambiar de tema, edita el archivo de configuraci\u00f3n (mkdocs.yml) y a\u00f1ade una l\u00ednea como la siguiente:</p> <p>YAML<pre><code>theme: readthedocs\n</code></pre> Al guardar el archivo, ver\u00e1s que la apariencia del sitio cambia:</p> <p> </p> Tema readthedocs <p> </p> Tema mkdocs <p> </p> Tema material <p>Temas por defecto</p> <p>MkDocs solo incluye de serie dos temas (mkdocs y readthedocs). Sin embargo, existen otros desarrollados por terceros. Por lo general, instalarlos y configurarlos es un proceso muy sencillo, aunque deber\u00e1s consultar la documentaci\u00f3n de cada tema.</p> <p>En este enlace encontrar\u00e1s m\u00e1s informaci\u00f3n sobre otros temas para MkDocs: https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes.</p> <p>Material for MkDocs</p> <p>Uno de los temas m\u00e1s completos, amigables y vers\u00e1tiles es Material for MkDocs. Puedes consultar su documentaci\u00f3n si quieres usarlo.</p> <p>Para instalarlo, ejecuta: <code>pip install mkdocs-material</code>.</p> <p>Para utilizarlo, a\u00f1ade al archivo de configuraci\u00f3n: <code>theme: material</code>.</p> <p>https://squidfunk.github.io/mkdocs-material/</p>"},{"location":"mkdocs/configuracion/#41-modificamos-el-tema","title":"4.1. Modificamos el tema","text":"<p>Si quieres modificar algunos detalles del tema, puedes crear un archivo con tus propias reglas CSS y colocarlo en la carpeta donde tengas los archivos fuente (la que indiques en docs_dir). Despu\u00e9s, en el archivo mkdocs.yml, lo referencias con la opci\u00f3n <code>extra.css</code>.</p> <p>Por ejemplo:</p> <p></p> <p>Archivo mkdocs.yml (fragmento):</p> YAML<pre><code>docs_dir: \"md\"\nsite_dir: \"docs\"\n\n...\n\nextra_css:\n  - css/extra.css\n</code></pre> <p>Al construir el proyecto (build), comprobar\u00e1s que los archivos CSS personalizados se copian en la carpeta indicada en site_dir y que los cambios se aplican al servir el sitio de manera local.</p> <p></p>"},{"location":"mkdocs/configuracion/#5-cambiar-el-icono-de-la-web","title":"5. Cambiar el icono de la web","text":"<p>Por defecto, MkDocs utiliza su propio icono. Si quieres usar uno diferente, crea un directorio img en la carpeta docs y guarda ah\u00ed un archivo llamado favicon.ico. MkDocs lo detectar\u00e1 autom\u00e1ticamente y reemplazar\u00e1 el icono por defecto.</p>"},{"location":"mkdocs/configuracion/#6-anadir-admonitions-cajas-al-estilo-awesomebox","title":"6. A\u00f1adir admonitions (cajas al estilo \u201cawesomebox\u201d)","text":"<p>Para resaltar contenido con cajas de colores (admonitions), hay que a\u00f1adir el siguiente plugin en el archivo de configuraci\u00f3n:</p> YAML<pre><code>markdown_extensions:\n  - admonition\n</code></pre> <p>A diferencia de \u201cawesomebox\u201d, las cajas de MkDocs se definen con tres signos de exclamaci\u00f3n (!!!) y el contenido dentro de la caja va tabulado. Por ejemplo:</p> Markdown<pre><code>!!!note \"Anotaci\u00f3n\"\n    Esta parte s\u00ed que la pod\u00e9is probar en casa.\n\n!!!warning \"\u00a1Cuidado!\"\n    Ten cuidado al realizar esta parte.\n\n!!!danger \"\u00a1Peligro!\"\n    No prob\u00e9is esto en casa.\n</code></pre> <p>Anotaci\u00f3n</p> <p>Esta parte s\u00ed que la pod\u00e9is probar en casa.</p> <p>\u00a1Cuidado!</p> <p>Ten cuidado al realizar esta parte.</p> <p>\u00a1Peligro!</p> <p>No prob\u00e9is esto en casa.</p>"},{"location":"mkdocs/configuracion/#7-construir-el-sitio-web","title":"7. Construir el sitio web","text":"<p>Finalmente, despu\u00e9s de haber comprobado en nuestro ordenador que el resultado es el esperado, construimos el sitio web (dej\u00e1ndolo preparado para publicarlo en un servidor) mediante el comando:</p> Bash<pre><code>mkdocs build\n</code></pre> <p>Ver\u00e1s que se crea una carpeta site con la siguiente estructura:</p> <p></p> <p>Esta carpeta contiene todos los archivos necesarios para servir el sitio web. Es la carpeta que se debe subir a cualquier servidor para que sea accesible a trav\u00e9s de Internet.</p>"},{"location":"mkdocs/configuracion/#8-resum","title":"8. Resum","text":"<ol> <li>Instalamos MkDocs.</li> <li>Creamos un nuevo proyecto con <code>mkdocs new \"nombre_del_proyecto\"</code>.</li> <li>Servimos el sitio de forma local y comprobamos que todo funciona y se ve como queremos con <code>mkdocs serve</code>.</li> <li>A\u00f1adimos el contenido en archivos .md en la carpeta docs.</li> <li>Enlazamos los archivos al men\u00fa de navegaci\u00f3n modificando el archivo mkdocs.yml.</li> <li>Configuramos el tema, el nombre del sitio y el resto de opciones que queramos usar.</li> <li>Construimos el sitio con <code>mkdocs build</code>.</li> </ol> <p>De esta manera, dispondremos de un sitio est\u00e1tico listo para ser publicado en cualquier servidor.</p>"},{"location":"mkdocs/github/","title":"Alojamiento en GitHub","text":""},{"location":"mkdocs/github/#1-alojamos-nuestra-web-en-el-servidor-de-github","title":"1. Alojamos nuestra web en el servidor de GitHub","text":""},{"location":"mkdocs/github/#11-que-es-un-sistema-de-control-de-versiones","title":"1.1. \u00bfQu\u00e9 es un sistema de control de versiones?","text":"<p>Para entender qu\u00e9 es GitHub, primero debemos conocer dos conceptos relacionados:</p> <ul> <li>Sistema de control de versiones</li> <li>Git</li> </ul> <p>Un sistema de control de versiones ayuda a los desarrolladores (o creadores de contenido) a rastrear y gestionar los cambios que se van produciendo en un proyecto. Se utiliza de forma muy habitual en el desarrollo de software, pero tambi\u00e9n puede aplicarse a otros \u00e1mbitos, como el educativo, para gestionar nuestros apuntes de forma organizada.</p> <p>Veamos un ejemplo:</p> <p>Imagina que somos desarrolladores colaborando en WordPress. Si uno de estos desarrolladores quisiera trabajar en una parte concreta del c\u00f3digo de WordPress, no ser\u00eda seguro ni eficiente editar el c\u00f3digo \u201coficial\u201d directamente.</p> <p>En su lugar, el control de versiones permite a los programadores trabajar con seguridad a trav\u00e9s de ramificaciones y fusiones:</p> <ul> <li>Ramificaci\u00f3n: un desarrollador duplica el c\u00f3digo fuente (llamado repositorio) en su equipo local y puede modificar solo esa parte, sin afectar al resto del proyecto.</li> <li>Fusi\u00f3n: cuando el desarrollador ha probado y confirmado que sus cambios funcionan correctamente, integra (fusiona) su parte del c\u00f3digo con la rama principal, haciendo oficiales las modificaciones.</li> </ul> <p>El sistema de control de versiones nos permite, entre otras cosas, ver qu\u00e9 cambios se han hecho, revertirlos, fusionarlos o incluso volver a versiones anteriores del proyecto.</p> <p>Otro ejemplo muy claro de control de versiones lo vemos en Google Docs. Para acceder a las distintas versiones de un documento, basta con hacer clic en el indicador que muestra la \u00faltima fecha de modificaci\u00f3n. En la ventana que aparece, podemos ver todas las revisiones guardadas, observar en verde lo que se ha a\u00f1adido o cambiado y, si lo deseamos, revertir el documento a un estado anterior.</p> <p></p> <p>Adem\u00e1s de la vista con todas las versiones, tambi\u00e9n podemos ver en verde el contenido nuevo y, en ocasiones, con texto tachado las partes que se han eliminado.</p> <p></p> <p>VSCode tambi\u00e9n ofrece un sistema b\u00e1sico de control de versiones para nuestros archivos: permite volver a un punto anterior en el tiempo. Para usarlo, haz clic en la parte inferior derecha, en TIMELINE o L\u00cdNEA DE TIEMPO (seg\u00fan el idioma), donde ver\u00e1s las diferentes versiones que se han guardado de forma autom\u00e1tica. Al pulsar sobre cualquier versi\u00f3n, el editor te mostrar\u00e1 los cambios realizados respecto a la actual y te dar\u00e1 la opci\u00f3n de recuperar la versi\u00f3n anterior si as\u00ed lo prefieres.</p>"},{"location":"mkdocs/github/#111-git","title":"1.1.1. Git","text":"<p>Git es un sistema de control de versiones de c\u00f3digo abierto creado por Linus Torvalds (el desarrollador inicial del kernel de Linux) en 2005.</p> <p>Se considera un sistema de control de versiones distribuido, ya que todas las versiones del proyecto est\u00e1n disponibles en el ordenador de cada desarrollador, lo que facilita enormemente la creaci\u00f3n de ramas y la fusi\u00f3n de c\u00f3digo.</p> <p>De acuerdo con encuestas de Stack Overflow, m\u00e1s del 87% de los desarrolladores utilizan Git, lo que lo convierte en la herramienta m\u00e1s popular para el control de versiones en la actualidad.</p>"},{"location":"mkdocs/github/#12-entonces-que-es-github","title":"1.2. Entonces, \u00bfqu\u00e9 es GitHub?","text":"<p>GitHub es una plataforma que ofrece alojamiento gratuito de repositorios Git en la nube. Dicho de otro modo, permite utilizar repositorios Git a trav\u00e9s de la web sin necesidad de trabajar siempre con la l\u00ednea de comandos.</p> <p>Su interfaz es muy sencilla e intuitiva, lo que ha hecho que GitHub sea muy popular no solo para desarrollar software, sino tambi\u00e9n para gestionar todo tipo de proyectos (libros, apuntes, documentaci\u00f3n, etc.).</p> <p>Al crear repositorios en GitHub, puedes decidir si ser\u00e1n p\u00fablicos \u2014accesibles para cualquiera\u2014 o privados, en cuyo caso solo los colaboradores designados podr\u00e1n acceder a ellos.</p> <p>Acerca de GitHub</p> <p>GitHub se lanz\u00f3 en 2008. </p> <p>En 2018, Microsoft adquiri\u00f3 GitHub por 7.500 millones de d\u00f3lares.</p> <p>En enero de 2020, GitHub contaba con m\u00e1s de 40 millones de usuarios, m\u00e1s de 190 millones de repositorios y 28 millones de repositorios p\u00fablicos.</p>"},{"location":"mkdocs/github/#2-configuracion-de-github","title":"2. Configuraci\u00f3n de GitHub","text":""},{"location":"mkdocs/github/#21-registro-de-usuario","title":"2.1. Registro de usuario","text":"<p>En este primer apartado crearemos un repositorio en GitHub para alojar nuestra p\u00e1gina web. </p> <p>El primer paso consiste en registrarnos en GitHub (si a\u00fan no tenemos cuenta), accediendo al siguiente enlace: https://github.com/signup.</p> <p>Registro</p> <p>Observa que el proceso de registro se realiza mediante un formulario totalmente integrado en la web, con una est\u00e9tica muy cuidada.</p>"},{"location":"mkdocs/github/#22-creacion-de-un-repositorio","title":"2.2. Creaci\u00f3n de un repositorio","text":"<p>Un repositorio de GitHub es un proyecto alojado en la nube sobre el que queremos llevar un control de versiones a trav\u00e9s de la web.</p> <p>Repositorio local de GitHub</p> <p>Tambi\u00e9n podemos clonar un repositorio en nuestro disco duro para trabajar de forma local y subir solo los cambios definitivos para su publicaci\u00f3n.</p> <p>Visual Studio Code (VSCode) facilita mucho este proceso de trabajo con repositorios de GitHub. Recomendamos encarecidamente esta forma de proceder.</p> <p>Para crear un repositorio, iniciamos sesi\u00f3n en https://github.com. Luego, en la parte superior derecha, pulsamos el bot\u00f3n con el s\u00edmbolo <code>+</code> y elegimos la opci\u00f3n <code>New repository</code>. </p> <p>Asignamos un nombre que identifique el repositorio y lo marcamos como p\u00fablico (o privado, si as\u00ed lo deseamos). Opcionalmente, podemos a\u00f1adir un fichero <code>README</code> y una licencia.</p>"},{"location":"mkdocs/github/#23-clonacion-del-repositorio","title":"2.3. Clonaci\u00f3n del repositorio","text":"<p>A continuaci\u00f3n, vamos a descargar el repositorio de GitHub a nuestro ordenador para poder agregarle contenido. Una vez comprobado que todo funciona, volveremos a subir esos cambios a GitHub para que se publique la web.</p> <p>Para obtener el c\u00f3digo y trabajar en \u00e9l, es necesario clonar el repositorio en nuestro disco duro. Utilizaremos la pesta\u00f1a de control de versiones integrada en Visual Studio Code para hacerlo:</p> <p>VSCode nos pedir\u00e1 la URL del repositorio que queremos clonar. Podemos obtenerla desde GitHub de dos maneras distintas, dependiendo de si el repositorio est\u00e1 completamente vac\u00edo o si ya contiene alg\u00fan archivo (por ejemplo, README.md y LICENSE).</p> VSCode Clonar Repositorio vac\u00edo VSCode Clonar Repositorio no vac\u00edo <p>Git</p> <p>Si no tienes Git instalado, la opci\u00f3n para clonar el repositorio aparecer\u00e1 deshabilitada. </p> <p>En sistemas basados en Debian/Ubuntu se puede instalar con:</p> Bash<pre><code>sudo apt install git\n</code></pre> <p>En Windows, puedes visitar este enlace para descargar la \u00faltima versi\u00f3n enlace (por ejemplo, Git-2.39.2-64-bit.exe en el momento de redactar estos apuntes).</p> <p>Si todo se clona correctamente, ver\u00e1s que se ha creado una carpeta con el mismo nombre del repositorio en la ubicaci\u00f3n elegida. En caso de que el repositorio contenga archivos, los encontrar\u00e1s dentro de esa carpeta.</p>"},{"location":"mkdocs/github/#24-configuramos-el-proyecto-de-mkdocs-para-publicar-en-github","title":"2.4. Configuramos el proyecto de mkdocs para publicar en GitHub","text":"<p>Ahora debemos crear un proyecto de mkdocs dentro de la carpeta del repositorio o, si lo preferimos, copiar un proyecto de mkdocs que hayamos creado previamente dentro de la carpeta clonada de GitHub.</p> <p>mkdocs new</p> <p>Cuando creamos un proyecto mkdocs desde cero, usamos el comando <code>mkdocs new \"nombre_del_proyecto\"</code>. </p> <p>Sin embargo, si ya tenemos una carpeta del repositorio clonado en GitHub, deberemos ejecutar <code>mkdocs new \"nombre_carpeta_github\"</code>.</p> <p>De este modo, mkdocs usar\u00e1 directamente esa carpeta (en lugar de crear una carpeta anidada dentro de la otra).</p> <p>Carpeta docs y site</p> <p>Por defecto, los archivos Markdown en un proyecto mkdocs se encuentran en la carpeta <code>docs</code>, mientras que el sitio web generado se construye en la carpeta <code>site</code>. Sin embargo, GitHub Pages solo puede publicar una web desde la ra\u00edz del repositorio o desde la carpeta docs.    </p> <p>Por tanto, tenemos dos opciones:</p> <ol> <li>Ejecutar <code>mkdocs build</code> y copiar el contenido de la carpeta <code>site</code> a la ra\u00edz del repositorio (opci\u00f3n no recomendada).</li> <li>Ajustar la configuraci\u00f3n para que los archivos fuente en Markdown est\u00e9n en otra carpeta y el resultado de la compilaci\u00f3n se genere en <code>docs</code> (opci\u00f3n recomendada). </li> </ol> <p>Con la segunda opci\u00f3n recomendada podemos conservar tanto los archivos fuente en Markdown como la web compilada en un mismo repositorio de GitHub.</p> <p>Para configurar esta segunda opci\u00f3n, debemos modificar el archivo de configuraci\u00f3n de mkdocs e indicar lo siguiente:</p> YAML<pre><code>docs_dir: 'md'\nsite_dir: 'docs'\n</code></pre> <p>As\u00ed, los archivos Markdown se ubican en una carpeta llamada md, mientras que el resultado de la construcci\u00f3n (build) se deposita en la carpeta docs.</p> <p>Cuando ejecutemos el comando <code>mkdocs build</code>, los archivos finales de la web se generar\u00e1n autom\u00e1ticamente en la carpeta docs.</p>"},{"location":"mkdocs/github/#25-agregamos-los-archivos-locales-al-repositorio-remoto-de-github","title":"2.5. Agregamos los archivos locales al repositorio remoto de GitHub","text":"<p>Ahora debemos publicar los cambios que acabamos de realizar en nuestra copia local del repositorio para que aparezcan en GitHub.</p> <p>F\u00edjate en que en el explorador de archivos de VSCode, a la izquierda de cada archivo, puede aparecer la letra U (untracked, es decir, no incluido todav\u00eda en el repositorio) o M (modified, modificado despu\u00e9s de un commit previo).</p> <p>Para subir estos archivos, iremos a la pesta\u00f1a Source Control (Control de c\u00f3digo fuente) en el lado izquierdo de VSCode. All\u00ed, escribimos un mensaje indicando los cambios que hemos realizado y pulsamos el bot\u00f3n Commit. Por ejemplo, podr\u00edamos escribir algo como: \u201cPrimera versi\u00f3n de la web con mkdocs\u201d.</p> <p>VSCode mostrar\u00e1 una ventana preguntando si queremos a\u00f1adir y confirmar todos los cambios a la vez. Aceptamos para continuar.</p> <p>Para evitar si se produce alg\u00fan error de configuraci\u00f3n de Git, es probable que tengamos que indicar nuestro nombre y correo mediante los siguientes comandos (con los datos que utilizamos en el registro de GitHub):</p> Bash<pre><code>git config --global user.email \"Tu correo electr\u00f3nico\"\ngit config --global user.name \"Tu nombre de usuario\"\n</code></pre>"},{"location":"mkdocs/github/#26-subimos-los-cambios-a-github","title":"2.6. Subimos los cambios a GitHub","text":"<p>Una vez hechos los commits en el repositorio local, solo nos queda sincronizar los cambios con el repositorio remoto.</p> <p>Para ello, pulsamos en el bot\u00f3n de sincronizaci\u00f3n (que aparece donde antes ve\u00edamos el de <code>commit</code>, dentro de la pesta\u00f1a de control de versiones).</p> <p>VSCode solicitar\u00e1 permiso para que la extensi\u00f3n de GitHub (que viene integrada por defecto) inicie sesi\u00f3n y pueda guardar los cambios en el repositorio remoto. Debemos concederle permiso; esto iniciar\u00e1 un intercambio de tokens entre el navegador y VSCode para asegurar la autenticaci\u00f3n. Si no hab\u00edamos iniciado sesi\u00f3n en GitHub, nos pedir\u00e1 usuario y contrase\u00f1a.</p> <p>Si todo ha ido bien, en la parte de cuentas de usuario (icono situado abajo a la izquierda en VSCode) aparecer\u00e1 nuestra sesi\u00f3n de GitHub iniciada y el repositorio local quedar\u00e1 sincronizado con el remoto.</p> <p>Podemos verificar que nuestros archivos se han subido correctamente accediendo a GitHub y comprobando que, en la p\u00e1gina del repositorio, aparecen los nuevos ficheros.</p>"},{"location":"mkdocs/github/#3-configuramos-github-para-que-publique-la-web","title":"3. Configuramos GitHub para que publique la web","text":"<p>Por \u00faltimo, solo queda ajustar la configuraci\u00f3n en GitHub para que publique nuestro build.</p> <p>Accede a la pesta\u00f1a Settings del repositorio y busca la secci\u00f3n Pages. Selecciona la rama principal (normalmente main) y la carpeta docs como ubicaci\u00f3n de la web.</p> <p>Despu\u00e9s de unos instantes (la primera vez puede tardar 5 minutos), GitHub indicar\u00e1 si la p\u00e1gina se ha publicado o si ha habido alg\u00fan problema. Si todo est\u00e1 correcto, ver\u00e1s la direcci\u00f3n donde se ha publicado la web, normalmente con el formato https://nombre_usuario.github.io/nombre_repositorio. Puedes probar a navegar a esa direcci\u00f3n para ver si tu p\u00e1gina se muestra tal y como aparec\u00eda en el servidor local.</p> <p>Trabajo local y trabajo remoto</p> <p>Los archivos pueden modificarse tanto desde la web de GitHub como desde tu entorno local. Sin embargo, para proyectos basados en mkdocs, suele ser necesario compilar la web (build) antes de que los cambios se vean reflejados. Por ello, es aconsejable trabajar en local para poder generar el sitio, y luego subir (push) los cambios.</p> <p>Construcci\u00f3n de la web</p> <p>Recuerda ejecutar el comando <code>mkdocs build</code> antes de subir los cambios, de lo contrario solo se actualizar\u00e1n los archivos fuente y no la web generada. Por lo general, GitHub Pages tarda un par de minutos en reflejar los cambios despu\u00e9s de sincronizar con el repositorio remoto.</p> <p>Uso de Source Control</p> <p>Si est\u00e1s acostumbrado a trabajar con Git y GitHub desde l\u00ednea de comandos, puedes usar directamente <code>git clone</code>, <code>git add</code>, <code>git commit</code> y <code>git push</code>. Visual Studio Code act\u00faa como una interfaz gr\u00e1fica que simplifica el proceso, pero el funcionamiento interno es el mismo. </p>"},{"location":"mkdocs/github/#4-mi-archivo-completo-mkdocsyml","title":"4. Mi archivo completo mkdocs.yml","text":"<p>Os dejo como tengo configurado mi archivo mkdocs.yml de la web del Proyecto intermodular</p> YAML<pre><code># Nom del lloc\nsite_name: PROYECTO INTERMODULAR\n\n# Carpeta amb el documents font\ndocs_dir: 'md'\n\n# Carpeta on es generar\u00e0 el lloc web (mkdocs build)\nsite_dir: 'docs'\n\n# Adre\u00e7a on s'executa el server local (mkdocs serve)\ndev_addr: localhost:4000\n\n# Navegaci\u00f3 dels documents\nnav:\n- Inicio: index.md\n- Markdown:\n  - Introducci\u00f3n: markdown/introduccion.md\n  - Editores: markdown/editores.md\n  - Sintaxis b\u00e1sica: markdown/sintaxis.md\n  - Referencias: markdown/referencias.md\n- MkDocs:\n  - Introducci\u00f3n: mkdocs/introduccion.md\n  - Instalaci\u00f3n: mkdocs/instalacion.md\n  - Configuraci\u00f3n: mkdocs/configuracion.md\n  - Alojamiento en GitHub: mkdocs/github.md\n  - Referencias: mkdocs/referencias.md\n\n# Extenions\nmarkdown_extensions:\n  - admonition\n  - attr_list\n  - md_in_html\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n\n# Tema a triar\ntheme: \n  name: material   # selecci\u00f3 del tema - mkdocs o readthedocs / material (pip install mkdocs-material)\n  highlightjs: true\n  palette:\n   # Boto que canvia a mode oscur\n    - scheme: default\n      toggle:\n        icon: material/brightness-7 \n        name: Switch to dark mode\n    # Bot\u00f3 que canvia a mode clar\n    - scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n  features:\n    # utilitats de copia de codi\n    - content.code.copy \n    - content.code.select\n    - content.code.annotate\n    - navigation.top    # boto flotant de tornar a dalt \n\nextra_css:\n  - css/extra.css\n\n# Altres afegits\nplugins:\n  - search      # plugin del quadre cerca\n</code></pre>"},{"location":"mkdocs/instalacion/","title":"Instalaci\u00f3n MkDocs","text":"<p>Para seguir estos pasos, recomendamos utilizar Visual Studio Code (VSCode), ya que permite disponer de un editor de archivos y una terminal integrada en el mismo programa.</p>"},{"location":"mkdocs/instalacion/#1-instalacion-de-mkdocs","title":"1. Instalaci\u00f3n de MkDocs","text":"<p>Para instalar MkDocs en nuestro ordenador, ejecutaremos el siguiente comando en la consola (Konsole para LliureX, PowerShell para Windows...):</p> Bash<pre><code>pip install mkdocs\n</code></pre> <p>Pip</p> <p>Si no tienes instaldo pip, tendr\u00e1s que instalar Python3 y, durante la instalaci\u00f3n, marcar la opci\u00f3n de instalar pip y a\u00f1adirlo al PATH. Puedes descargar Python3 en el siguiente enlace https://www.python.org/downloads/.</p> <p>Una vez que MkDocs est\u00e9 instalado, deber\u00edas poder ejecutar el siguiente comando en la consola:</p> Bash<pre><code>mkdocs --version\n</code></pre> <p>Si todo va bien, obtendr\u00e1s una respuesta similar a la siguiente:</p> Bash<pre><code>Linux:\n - mkdocs, version 1.6.1 from /home/usuario/.local/lib/python3.13/site-packages/mkdocs (Python 3.13)\n\nWindows:\n - mkdocs, version 1.6.1 from C:\\Users\\Usuario\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\mkdocs (Python 3.13)\n</code></pre>"},{"location":"mkdocs/instalacion/#2-creacion-de-un-nuevo-proyecto","title":"2. Creaci\u00f3n de un nuevo proyecto","text":"<p>Ahora que MkDocs est\u00e1 instalado, necesitamos crear un nuevo proyecto para construir nuestro sitio web. Para ello, ejecutamos:</p> Bash<pre><code>mkdocs new \"nombre_del_proyecto\"\n</code></pre>"},{"location":"mkdocs/instalacion/#3-estructura-del-proyecto","title":"3. Estructura del proyecto","text":"<p>Al crear un nuevo proyecto con MkDocs, ver\u00e1s que se ha generado una estructura parecida a esta:</p> Text only<pre><code>.\n\u251c\u2500\u2500 docs\n\u2502   \u2514\u2500\u2500 index.md\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre> <ul> <li>El archivo mkdocs.yml es el archivo de configuraci\u00f3n principal de todo el proyecto.</li> <li>La carpeta docs contendr\u00e1 los documentos en formato Markdown.<ul> <li>El archivo index.md es un archivo de muestra que se mostrar\u00e1 al acceder a la ra\u00edz del sitio web.</li> </ul> </li> </ul> <p>Como puedes observar, por un lado tendr\u00e1s el contenido en formato Markdown y, por otro, la configuraci\u00f3n de c\u00f3mo se va a renderizar este contenido.</p> <p>Carpeta docs</p> <p>Aunque, por defecto, los archivos Markdown se encuentren en la carpeta docs, m\u00e1s adelante modificaremos esta configuraci\u00f3n.</p>"},{"location":"mkdocs/instalacion/#4-servir-la-web-en-local","title":"4. Servir la web en local","text":"<p>Para servir una web, normalmente necesitar\u00edamos un servidor que hospede nuestro sitio y que nos permita acceder a \u00e9l de forma local o remota a trav\u00e9s del navegador. MkDocs nos facilita esta tarea creando un servidor en nuestro propio equipo para que podamos previsualizar los cambios antes de publicarlos en un servidor p\u00fablico (accesible desde Internet) o de compilar el sitio para su publicaci\u00f3n.</p> <p>Para servir la web, simplemente ejecuta el siguiente comando dentro de la carpeta del proyecto (usa el comando cd para entrar en ella):</p> Bash<pre><code>$ mkdocs serve\nINFO     -  Building documentation...\nINFO     -  Cleaning site directory\nINFO     -  Documentation built in 0.06 seconds\nINFO     -  [12:49:32] Watching paths for changes: 'docs', 'mkdocs.yml'\nINFO     -  [12:49:32] Serving on http://127.0.0.1:8000/\n</code></pre> <p>A continuaci\u00f3n, accede a la URL http://127.0.0.1:8000/ y ver\u00e1s la p\u00e1gina web por defecto:</p> <p>\u00cdndice por defecto</p> <p>Abre en VSCode el archivo index.md y comprueba c\u00f3mo se corresponde con lo que ves en tu navegador. Es decir, MkDocs est\u00e1 convirtiendo el contenido Markdown a un formato web.</p> <p>Ahora puedes introducir los cambios que desees en tu contenido; al guardar, los cambios se reflejar\u00e1n autom\u00e1ticamente en el navegador, siempre y cuando el comando <code>mkdocs serve</code> siga en ejecuci\u00f3n. La recarga autom\u00e1tica se produce siempre que modifiques el archivo de configuraci\u00f3n, los archivos Markdown o cualquier archivo del tema que est\u00e9s usando.</p>"},{"location":"mkdocs/introduccion/","title":"MkDocs","text":""},{"location":"mkdocs/introduccion/#1-web-estatica-con-mkdocs","title":"1. Web est\u00e1tica con MkDocs","text":"<p>En este apartado nos centraremos en construir un sitio web est\u00e1tico utilizando MkDocs. De nuevo, el aspecto de la web vendr\u00e1 determinado por plantillas (en este caso, llamadas temas). En este caso nos centrarnos en el contenido y no tanto en la apariencia, que simplemente configuraremos una sola vez.</p> <p>Una vez que hayamos construido nuestro sitio, aprenderemos a alojarlo en la web. Por lo tanto, lo publicaremos en un repositorio de GitHub para que est\u00e9 disponible de forma p\u00fablica a trav\u00e9s de Internet.</p>"},{"location":"mkdocs/introduccion/#11-que-es-mkdocs","title":"1.1. \u00bfQu\u00e9 es MkDocs?","text":"<p>MkDocs es un generador de sitios web est\u00e1ticos que toma como entrada texto escrito en Markdown y utiliza dise\u00f1os predefinidos para crear la p\u00e1gina resultante. Es posible personalizar la apariencia del sitio, los enlaces, los datos que se muestran y muchas otras opciones.</p> <p>La p\u00e1gina de referencia es la siguiente:</p> <ul> <li>MkDocs: https://www.mkdocs.org/ </li> </ul>"},{"location":"mkdocs/referencias/","title":"Referencias e informaci\u00f3n adicional MkDocs","text":"<p>Para mayor informaci\u00f3n sobre MkDocs pod\u00e9is consultar:</p> <ul> <li>La gu\u00eda de MkDocs: https://www.mkdocs.org/ </li> <li>Cat\u00e1logo GitHub: https://github.com/mkdocs/catalog</li> <li>La gu\u00eda de Material para MkDocs manual de referencia </li> </ul>"}]}